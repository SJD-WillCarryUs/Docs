<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// You can change the follow two code lines
// id is the id of the chess that you want to move, saved_position is the position matrix of all chesses
// UPPAAL will first check if the movement is legal and move the chess if legal
// Then UPPAAL will check if there's overlapping between chesses or if some chess go out of the board

int id = 6;
int saved_position[20] = { 2, 1, 1, 3, 2, 1, 1, 3, 7, 8, 9, 10, 4, 6, 6, 5, 4, 0, 0, 5};

// A view of the saved_position matrix
//  2, 1, 1, 3, 
//  2, 1, 1, 3, 
//  7, 8, 9,10, 
//  4, 6, 6, 5, 
//  4, 0, 0, 5

</declaration><template><name x="5" y="5">model</name><declaration>int init_position[20];

void copyPosition() {
	for(i : int[0, 19]) {
		init_position[i] = saved_position[i];
	}
}

int checkZero() {
	int occurence = 0;
	for(i : int[0, 19]) {
		if(init_position[i] == 0) {
			occurence++;
		}
	}
	return occurence;
}

int checkIDSum() {
	int sum = 0;
	for(i : int[0, 19]) {
		sum += init_position[i];
	}
	return sum;
}

// 11 for 1*1, 12 for 1*2, 21 for 2*1, 22 for 2*2
int checkChessType(int id){
	int type = 0;
	int occurence = 0;
	int last_position = 0;
	for(i : int[0, 19]) {
		if(init_position[i] == id) {
			last_position = i;
			occurence++;
		}
	}
	if(occurence == 1)
		type = 11;
	else if(occurence == 2) {
		if(last_position &gt;= 4 &amp;&amp; init_position[last_position-4] == id) {
			type = 21;
		} else {
			type = 12;
		}
	} else {
		type = 22;
	}
	return type;
}

int getFirstCoordinate(int id) {
	for(i : int[0, 19]) {
		if(init_position[i] == id) {
			return i;
		}
	}
	return -1;
}

void moveUp() {
	int type, coordinate;
	copyPosition();
	type = checkChessType(id);
	coordinate = getFirstCoordinate(id);
	if(type == 11) {
		if(coordinate &gt;= 4 &amp;&amp; init_position[coordinate-4] == 0) {
			init_position[coordinate-4] = id;
			init_position[coordinate] = 0;
		}	
	} else if(type == 21) {
		if(coordinate &gt;= 4 &amp;&amp; init_position[coordinate-4] == 0) {
			init_position[coordinate-4] = id;
			init_position[coordinate] = id;
			init_position[coordinate+4] = 0;
		}
	} else if(type == 12) {
		if(coordinate &gt;= 4 &amp;&amp; init_position[coordinate-4] == 0 &amp;&amp; init_position[coordinate-4+1] == 0) {
			init_position[coordinate-4] = id;
			init_position[coordinate-4+1] = id;
			init_position[coordinate] = 0;
			init_position[coordinate+1] = 0;
		}
	} else {
		if(coordinate &gt;= 4 &amp;&amp; init_position[coordinate-4] == 0 &amp;&amp; init_position[coordinate-4+1] == 0) {
			init_position[coordinate-4] = id;
			init_position[coordinate-4+1] = id;
			init_position[coordinate] = id;
			init_position[coordinate+1] = id;
			init_position[coordinate+4] = 0;
			init_position[coordinate+4+1] = 0;
		}
	}	
	return;
}

void moveDown() {
	int type, coordinate;
	copyPosition();
	type = checkChessType(id);
	coordinate = getFirstCoordinate(id);
	if(type == 11) {
		if(coordinate &lt;= 15 &amp;&amp; init_position[coordinate+4] == 0) {
			init_position[coordinate+4] = id;
			init_position[coordinate] = 0;
		}	
	} else if(type == 21) {
		if(coordinate &lt;= 11 &amp;&amp; init_position[coordinate+8] == 0) {
			init_position[coordinate+8] = id;
			init_position[coordinate+4] = id;
			init_position[coordinate] = 0;
		}
	} else if(type == 12) {
		if(coordinate &lt;= 14 &amp;&amp; init_position[coordinate+4] == 0 &amp;&amp; init_position[coordinate+4+1] == 0) {
			init_position[coordinate+4] = id;
			init_position[coordinate+4+1] = id;
			init_position[coordinate] = 0;
			init_position[coordinate+1] = 0;
		}
	} else {
		if(coordinate &lt;= 10 &amp;&amp; init_position[coordinate+8] == 0 &amp;&amp; init_position[coordinate+8+1] == 0) {
			init_position[coordinate+8] = id;
			init_position[coordinate+8+1] = id;
			init_position[coordinate+4] = id;
			init_position[coordinate+4+1] = id;
			init_position[coordinate] = 0;
			init_position[coordinate+1] = 0;
		}
	}
	return;
}

void moveLeft() {
	int type, coordinate;
	copyPosition();
	type = checkChessType(id);
	coordinate = getFirstCoordinate(id);
	if(type == 11) {
		if((coordinate % 4) &gt;= 1 &amp;&amp; init_position[coordinate-1] == 0) {
			init_position[coordinate-1] = id;
			init_position[coordinate] = 0;
		}	
	} else if(type == 21) {
		if((coordinate % 4) &gt;= 1 &amp;&amp; init_position[coordinate-1] == 0 &amp;&amp; init_position[coordinate+4-1] == 0) {
			init_position[coordinate-1] = id;
			init_position[coordinate+4-1] = id;
			init_position[coordinate] = 0;
			init_position[coordinate+4] = 0;
		}
	} else if(type == 12) {
		if((coordinate % 4) &gt;= 1 &amp;&amp; init_position[coordinate-1] == 0) {
			init_position[coordinate-1] = id;
			init_position[coordinate] = id;
			init_position[coordinate+1] = 0;
		}
	} else {
		if((coordinate % 4) &gt;= 1 &amp;&amp; init_position[coordinate-1] == 0 &amp;&amp; init_position[coordinate+4-1] == 0) {
			init_position[coordinate-1] = id;
			init_position[coordinate+4-1] = id;
			init_position[coordinate] = id;
			init_position[coordinate+4] = id;
			init_position[coordinate+1] = 0;
			init_position[coordinate+4+1] = 0;
		}
	}
	return;
}

void moveRight() {
	int type, coordinate;
	copyPosition();
	type = checkChessType(id);
	coordinate = getFirstCoordinate(id);
	if(type == 11) {
		if((coordinate % 4) &lt;= 2 &amp;&amp; init_position[coordinate+1] == 0) {
			init_position[coordinate+1] = id;
			init_position[coordinate] = 0;
		}	
	} else if(type == 21) {
		if((coordinate % 4) &lt;= 2 &amp;&amp; init_position[coordinate+1] == 0 &amp;&amp; init_position[coordinate+4+1] == 0) {
			init_position[coordinate+1] = id;
			init_position[coordinate+4+1] = id;
			init_position[coordinate] = 0;
			init_position[coordinate+4] = 0;
		}
	} else if(type == 12) {
		if((coordinate % 4) &lt;= 1 &amp;&amp; init_position[coordinate+2] == 0) {
			init_position[coordinate+2] = id;
			init_position[coordinate+1] = id;
			init_position[coordinate] = 0;
		}
	} else {
		if((coordinate % 4) &lt;= 1 &amp;&amp; init_position[coordinate+2] == 0 &amp;&amp; init_position[coordinate+4+2] == 0) {
			init_position[coordinate+2] = id;
			init_position[coordinate+4+2] = id;
			init_position[coordinate+1] = id;
			init_position[coordinate+4+1] = id;
			init_position[coordinate] = 0;
			init_position[coordinate+4] = 0;
		}
	}
	return;
}

void nextRound() {
	copyPosition();
	return;
}

</declaration><location id="id0" x="-488" y="-304"><name x="-498" y="-334">new_state</name></location><location id="id1" x="-840" y="-304"><name x="-872" y="-336">init_state</name></location><init ref="id1"/><transition><source ref="id0"/><target ref="id1"/><label kind="assignment" x="-704" y="-128">nextRound()</label><nail x="-488" y="-272"/><nail x="-488" y="-104"/><nail x="-840" y="-104"/></transition><transition><source ref="id1"/><target ref="id0"/><label kind="assignment" x="-696" y="-328">moveLeft()</label><nail x="-664" y="-336"/></transition><transition><source ref="id1"/><target ref="id0"/><label kind="assignment" x="-704" y="-296">moveRight()</label><nail x="-664" y="-264"/></transition><transition><source ref="id1"/><target ref="id0"/><label kind="assignment" x="-704" y="-216">moveDown()</label><nail x="-664" y="-216"/></transition><transition><source ref="id1"/><target ref="id0"/><label kind="assignment" x="-696" y="-408">moveUp()</label><nail x="-664" y="-384"/></transition></template><system>// Place template instantiations here.
Process = model();

// List one or more processes to be composed into a system.
system Process;</system></nta>